//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: fileoperations

package fileoperations

import "github.com/google/flatbuffers/go"

import (
  context "golang.org/x/net/context"
  grpc "google.golang.org/grpc"
)

// Client API for FileOpsService service
type FileOpsServiceClient interface{
  Open(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* OpenResponse, error)  
  Close(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* CloseResponse, error)  
  StreamReadAt(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (FileOpsService_StreamReadAtClient, error)  
  ReadAt(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* StreamReadAtResponse, error)  
  Size(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* SizeResponse, error)  
}

type fileOpsServiceClient struct {
  cc *grpc.ClientConn
}

func NewFileOpsServiceClient(cc *grpc.ClientConn) FileOpsServiceClient {
  return &fileOpsServiceClient{cc}
}

func (c *fileOpsServiceClient) Open(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* OpenResponse, error) {
  out := new(OpenResponse)
  err := grpc.Invoke(ctx, "/fileoperations.FileOpsService/Open", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *fileOpsServiceClient) Close(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* CloseResponse, error) {
  out := new(CloseResponse)
  err := grpc.Invoke(ctx, "/fileoperations.FileOpsService/Close", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *fileOpsServiceClient) StreamReadAt(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (FileOpsService_StreamReadAtClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_FileOpsService_serviceDesc.Streams[0], c.cc, "/fileoperations.FileOpsService/StreamReadAt", opts...)
  if err != nil { return nil, err }
  x := &fileOpsServiceStreamReadAtClient{stream}
  if err := x.ClientStream.SendMsg(in); err != nil { return nil, err }
  if err := x.ClientStream.CloseSend(); err != nil { return nil, err }
  return x,nil
}

type FileOpsService_StreamReadAtClient interface {
  Recv() (*StreamReadAtResponse, error)
  grpc.ClientStream
}

type fileOpsServiceStreamReadAtClient struct{
  grpc.ClientStream
}

func (x *fileOpsServiceStreamReadAtClient) Recv() (*StreamReadAtResponse, error) {
  m := new(StreamReadAtResponse)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

func (c *fileOpsServiceClient) ReadAt(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* StreamReadAtResponse, error) {
  out := new(StreamReadAtResponse)
  err := grpc.Invoke(ctx, "/fileoperations.FileOpsService/ReadAt", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *fileOpsServiceClient) Size(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* SizeResponse, error) {
  out := new(SizeResponse)
  err := grpc.Invoke(ctx, "/fileoperations.FileOpsService/Size", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for FileOpsService service
type FileOpsServiceServer interface {
  Open(context.Context, *OpenRequest) (*flatbuffers.Builder, error)  
  Close(context.Context, *CloseRequest) (*flatbuffers.Builder, error)  
  StreamReadAt(*StreamReadAtRequest, FileOpsService_StreamReadAtServer) error  
  ReadAt(context.Context, *ReadAtRequest) (*flatbuffers.Builder, error)  
  Size(context.Context, *SizeRequest) (*flatbuffers.Builder, error)  
}

func RegisterFileOpsServiceServer(s *grpc.Server, srv FileOpsServiceServer) {
  s.RegisterService(&_FileOpsService_serviceDesc, srv)
}

func _FileOpsService_Open_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(OpenRequest)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(FileOpsServiceServer).Open(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/fileoperations.FileOpsService/Open",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(FileOpsServiceServer).Open(ctx, req.(* OpenRequest))
  }
  return interceptor(ctx, in, info, handler)
}


func _FileOpsService_Close_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(CloseRequest)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(FileOpsServiceServer).Close(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/fileoperations.FileOpsService/Close",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(FileOpsServiceServer).Close(ctx, req.(* CloseRequest))
  }
  return interceptor(ctx, in, info, handler)
}


func _FileOpsService_StreamReadAt_Handler(srv interface{}, stream grpc.ServerStream) error {
  m := new(StreamReadAtRequest)
  if err := stream.RecvMsg(m); err != nil { return err }
  return srv.(FileOpsServiceServer).StreamReadAt(m, &fileOpsServiceStreamReadAtServer{stream})
}

type FileOpsService_StreamReadAtServer interface { 
  Send(* flatbuffers.Builder) error
  grpc.ServerStream
}

type fileOpsServiceStreamReadAtServer struct {
  grpc.ServerStream
}

func (x *fileOpsServiceStreamReadAtServer) Send(m *flatbuffers.Builder) error {
  return x.ServerStream.SendMsg(m)
}


func _FileOpsService_ReadAt_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(ReadAtRequest)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(FileOpsServiceServer).ReadAt(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/fileoperations.FileOpsService/ReadAt",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(FileOpsServiceServer).ReadAt(ctx, req.(* ReadAtRequest))
  }
  return interceptor(ctx, in, info, handler)
}


func _FileOpsService_Size_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(SizeRequest)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(FileOpsServiceServer).Size(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/fileoperations.FileOpsService/Size",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(FileOpsServiceServer).Size(ctx, req.(* SizeRequest))
  }
  return interceptor(ctx, in, info, handler)
}


var _FileOpsService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "fileoperations.FileOpsService",
  HandlerType: (*FileOpsServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Open",
      Handler: _FileOpsService_Open_Handler, 
    },
    {
      MethodName: "Close",
      Handler: _FileOpsService_Close_Handler, 
    },
    {
      MethodName: "ReadAt",
      Handler: _FileOpsService_ReadAt_Handler, 
    },
    {
      MethodName: "Size",
      Handler: _FileOpsService_Size_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName: "StreamReadAt",
      Handler: _FileOpsService_StreamReadAt_Handler, 
      ServerStreams: true,
    },
  },
}

